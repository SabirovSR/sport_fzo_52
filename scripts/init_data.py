#!/usr/bin/env python3
"""
Script to initialize database with sample data
"""
import asyncio
import sys
import os

# Add app to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app.database.connection import init_database
from app.database.repositories import district_repo, sport_repo, fok_repo
from app.models import District, Sport, FOK


async def init_sample_data():
    """Initialize database with sample data"""
    print("Initializing database...")
    await init_database()
    
    # Sample districts
    districts_data = [
        {"name": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω", "sort_order": 1},
        {"name": "–°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω", "sort_order": 2},
        {"name": "–Æ–∂–Ω—ã–π —Ä–∞–π–æ–Ω", "sort_order": 3},
        {"name": "–í–æ—Å—Ç–æ—á–Ω—ã–π —Ä–∞–π–æ–Ω", "sort_order": 4},
        {"name": "–ó–∞–ø–∞–¥–Ω—ã–π —Ä–∞–π–æ–Ω", "sort_order": 5},
        {"name": "–õ–µ–Ω–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω", "sort_order": 6},
        {"name": "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π —Ä–∞–π–æ–Ω", "sort_order": 7},
        {"name": "–°–æ–≤–µ—Ç—Å–∫–∏–π —Ä–∞–π–æ–Ω", "sort_order": 8},
    ]
    
    print("Creating districts...")
    for district_data in districts_data:
        existing = await district_repo.find_by_name(district_data["name"])
        if not existing:
            district = District(**district_data)
            await district_repo.create(district)
            print(f"Created district: {district.name}")
    
    # Sample sports
    sports_data = [
        {"name": "–§—É—Ç–±–æ–ª", "icon": "‚öΩ", "sort_order": 1},
        {"name": "–ë–∞—Å–∫–µ—Ç–±–æ–ª", "icon": "üèÄ", "sort_order": 2},
        {"name": "–í–æ–ª–µ–π–±–æ–ª", "icon": "üèê", "sort_order": 3},
        {"name": "–ü–ª–∞–≤–∞–Ω–∏–µ", "icon": "üèä", "sort_order": 4},
        {"name": "–¢–µ–Ω–Ω–∏—Å", "icon": "üéæ", "sort_order": 5},
        {"name": "–•–æ–∫–∫–µ–π", "icon": "üèí", "sort_order": 6},
        {"name": "–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞", "icon": "ü§∏", "sort_order": 7},
        {"name": "–ë–æ—Ä—å–±–∞", "icon": "ü§º", "sort_order": 8},
        {"name": "–ë–æ–∫—Å", "icon": "ü•ä", "sort_order": 9},
        {"name": "–õ–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞", "icon": "üèÉ", "sort_order": 10},
        {"name": "–¢—è–∂–µ–ª–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞", "icon": "üèãÔ∏è", "sort_order": 11},
        {"name": "–§–∏—Ç–Ω–µ—Å", "icon": "üí™", "sort_order": 12},
    ]
    
    print("Creating sports...")
    for sport_data in sports_data:
        existing = await sport_repo.find_by_name(sport_data["name"])
        if not existing:
            sport = Sport(**sport_data)
            await sport_repo.create(sport)
            print(f"Created sport: {sport.name}")
    
    # Sample FOKs
    foks_data = [
        {
            "name": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å '–û–ª–∏–º–ø'",
            "district": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω",
            "address": "—É–ª. –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, 1",
            "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —Å –±–∞—Å—Å–µ–π–Ω–æ–º –∏ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–º –∑–∞–ª–æ–º",
            "sports": ["–ü–ª–∞–≤–∞–Ω–∏–µ", "–§–∏—Ç–Ω–µ—Å", "–í–æ–ª–µ–π–±–æ–ª"],
            "contacts": [
                {"type": "phone", "value": "+7 (495) 123-45-67", "is_primary": True},
                {"type": "email", "value": "olimp@sport.ru"}
            ],
            "working_hours": "–ü–Ω-–í—Å: 06:00-23:00",
            "featured": True
        },
        {
            "name": "–§–û–ö '–î–∏–Ω–∞–º–æ'",
            "district": "–°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω", 
            "address": "–ø—Ä. –õ–µ–Ω–∏–Ω–∞, 45",
            "description": "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–Ω–æ-–æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–≤—ã–º –∑–∞–ª–æ–º",
            "sports": ["–ë–∞—Å–∫–µ—Ç–±–æ–ª", "–í–æ–ª–µ–π–±–æ–ª", "–§—É—Ç–±–æ–ª"],
            "contacts": [
                {"type": "phone", "value": "+7 (495) 234-56-78", "is_primary": True}
            ],
            "working_hours": "–ü–Ω-–ü—Ç: 07:00-22:00, –°–±-–í—Å: 08:00-21:00"
        },
        {
            "name": "–¶–µ–Ω—Ç—Ä –µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤ '–ë–æ–µ—Ü'",
            "district": "–Æ–∂–Ω—ã–π —Ä–∞–π–æ–Ω",
            "address": "—É–ª. –ü–æ–±–µ–¥—ã, 12",
            "description": "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –µ–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞–º–∏",
            "sports": ["–ë–æ–∫—Å", "–ë–æ—Ä—å–±–∞", "–§–∏—Ç–Ω–µ—Å"],
            "contacts": [
                {"type": "phone", "value": "+7 (495) 345-67-89", "is_primary": True},
                {"type": "website", "value": "https://boec-sport.ru"}
            ],
            "working_hours": "–ü–Ω-–í—Å: 08:00-22:00"
        },
        {
            "name": "–õ–µ–≥–∫–æ–∞—Ç–ª–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞–Ω–µ–∂",
            "district": "–í–æ—Å—Ç–æ—á–Ω—ã–π —Ä–∞–π–æ–Ω",
            "address": "—É–ª. –°—Ç–∞–¥–∏–æ–Ω–Ω–∞—è, 8",
            "description": "–ú–∞–Ω–µ–∂ –¥–ª—è –∑–∞–Ω—è—Ç–∏–π –ª–µ–≥–∫–æ–π –∞—Ç–ª–µ—Ç–∏–∫–æ–π —Å –±–µ–≥–æ–≤—ã–º–∏ –¥–æ—Ä–æ–∂–∫–∞–º–∏",
            "sports": ["–õ–µ–≥–∫–∞—è –∞—Ç–ª–µ—Ç–∏–∫–∞", "–§–∏—Ç–Ω–µ—Å"],
            "contacts": [
                {"type": "phone", "value": "+7 (495) 456-78-90", "is_primary": True}
            ],
            "working_hours": "–ü–Ω-–ü—Ç: 06:00-23:00, –°–±-–í—Å: 07:00-22:00",
            "featured": True
        },
        {
            "name": "–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä '–ö–æ—Ä—Ç'",
            "district": "–ó–∞–ø–∞–¥–Ω—ã–π —Ä–∞–π–æ–Ω",
            "address": "—É–ª. –¢–µ–Ω–Ω–∏—Å–Ω–∞—è, 5",
            "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –∫–æ—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã –∫—Ä—É–≥–ª—ã–π –≥–æ–¥",
            "sports": ["–¢–µ–Ω–Ω–∏—Å"],
            "contacts": [
                {"type": "phone", "value": "+7 (495) 567-89-01", "is_primary": True},
                {"type": "email", "value": "info@kort-tennis.ru"}
            ],
            "working_hours": "–ü–Ω-–í—Å: 07:00-23:00"
        },
        {
            "name": "–õ–µ–¥–æ–≤—ã–π –¥–≤–æ—Ä–µ—Ü '–ö—Ä–∏—Å—Ç–∞–ª–ª'",
            "district": "–õ–µ–Ω–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω",
            "address": "–ø—Ä. –ú–∏—Ä–∞, 33",
            "description": "–õ–µ–¥–æ–≤–∞—è –∞—Ä–µ–Ω–∞ –¥–ª—è —Ö–æ–∫–∫–µ—è –∏ —Ñ–∏–≥—É—Ä–Ω–æ–≥–æ –∫–∞—Ç–∞–Ω–∏—è",
            "sports": ["–•–æ–∫–∫–µ–π"],
            "contacts": [
                {"type": "phone", "value": "+7 (495) 678-90-12", "is_primary": True}
            ],
            "working_hours": "–ü–Ω-–í—Å: 06:00-24:00"
        }
    ]
    
    print("Creating FOKs...")
    for fok_data in foks_data:
        # Check if FOK already exists
        existing_foks = await fok_repo.get_by_district(fok_data["district"])
        exists = any(fok.name == fok_data["name"] for fok in existing_foks)
        
        if not exists:
            fok = FOK(**fok_data)
            await fok_repo.create(fok)
            print(f"Created FOK: {fok.name}")
    
    print("Sample data initialization completed!")


if __name__ == "__main__":
    asyncio.run(init_sample_data())