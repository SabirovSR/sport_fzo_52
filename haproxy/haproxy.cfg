global
    daemon
    maxconn 4096
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Statistics page
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats hide-version
    stats admin if TRUE
    http-request use-service prometheus-exporter if { path /stats/prometheus }

# Main frontend for bot webhook
frontend bot_webhook
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/
    redirect scheme https if !{ ssl_fc }
    
    # Health checks
    acl is_health path /health /healthz /ready /readyz
    acl is_metrics path /metrics
    acl is_webhook path_beg /webhook
    
    # Route to appropriate backend
    use_backend bot_health if is_health
    use_backend bot_metrics if is_metrics
    use_backend bot_webhook if is_webhook
    default_backend bot_webhook

# Backend for health checks (round-robin)
backend bot_health
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server bot1 bot-1:8000 check inter 5s fastinter 2s downinter 5s rise 3 fall 3
    server bot2 bot-2:8000 check inter 5s fastinter 2s downinter 5s rise 3 fall 3
    server bot3 bot-3:8000 check inter 5s fastinter 2s downinter 5s rise 3 fall 3

# Backend for metrics (round-robin)
backend bot_metrics
    balance roundrobin
    option httpchk GET /health
    
    server bot1 bot-1:8000 check inter 10s
    server bot2 bot-2:8000 check inter 10s
    server bot3 bot-3:8000 check inter 10s

# Backend for webhook (sticky sessions based on chat_id if available)
backend bot_webhook
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Stick table for session persistence (based on source IP)
    stick-table type ip size 200k expire 30m
    stick on src
    
    server bot1 bot-1:8000 check inter 10s fastinter 2s downinter 10s rise 3 fall 3 maxconn 1000
    server bot2 bot-2:8000 check inter 10s fastinter 2s downinter 10s rise 3 fall 3 maxconn 1000
    server bot3 bot-3:8000 check inter 10s fastinter 2s downinter 10s rise 3 fall 3 maxconn 1000

# Backend for admin interface (if needed)
backend bot_admin
    balance first
    option httpchk GET /health
    
    server bot1 bot-1:8000 check inter 10s backup
    server bot2 bot-2:8000 check inter 10s
    server bot3 bot-3:8000 check inter 10s backup

# Listen for Prometheus metrics
listen prometheus
    bind *:9090
    http-request use-service prometheus-exporter if { path /metrics }