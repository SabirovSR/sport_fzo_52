from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from bson import ObjectId
from loguru import logger

from app.models import User
from app.database.repositories import district_repo, fok_repo, application_repo, sport_repo
from app.keyboards.inline import (
    get_catalog_districts_keyboard,
    get_foks_keyboard, 
    get_fok_card_keyboard,
    get_sports_filter_keyboard,
    get_main_menu_keyboard
)
from app.config import settings


router = Router()


@router.callback_query(F.data == "catalog_main")
async def catalog_main(callback: CallbackQuery):
    """Show districts catalog"""
    try:
        districts = await district_repo.get_all_active()
        
        if not districts:
            await callback.message.edit_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–∞–π–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            "üè¢ <b>–ö–∞—Ç–∞–ª–æ–≥ –§–û–ö–æ–≤</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–Ω–æ-–æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤:",
            reply_markup=get_catalog_districts_keyboard(districts, 0, settings.MAX_ITEMS_PER_PAGE)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in catalog_main: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("districts_page_"))
async def districts_page(callback: CallbackQuery):
    """Handle districts pagination"""
    try:
        page = int(callback.data.split("_")[-1])
        districts = await district_repo.get_all_active()
        
        await callback.message.edit_reply_markup(
            reply_markup=get_catalog_districts_keyboard(districts, page, settings.MAX_ITEMS_PER_PAGE)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in districts_page: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("district_"))
async def district_foks(callback: CallbackQuery):
    """Show FOKs in selected district"""
    try:
        district_id = callback.data.split("_", 1)[1]
        
        # Handle back navigation
        if district_id.startswith("back_"):
            district_name = district_id.split("_", 1)[1]
            district = await district_repo.find_by_name(district_name)
            if not district:
                await callback.answer("‚ùå –†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
                return
            district_id = str(district.id)
        
        # Get district
        district = await district_repo.find_by_id(ObjectId(district_id))
        if not district:
            await callback.answer("‚ùå –†–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # Get FOKs in district
        foks = await fok_repo.get_by_district(district.name, 0, settings.MAX_ITEMS_PER_PAGE)
        foks_count = await fok_repo.count_by_district(district.name)
        
        if not foks:
            await callback.message.edit_text(
                f"‚ùå –í —Ä–∞–π–æ–Ω–µ <b>{district.name}</b> –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –§–û–ö–æ–≤.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ä–∞–π–æ–Ω.",
                reply_markup=get_catalog_districts_keyboard(
                    await district_repo.get_all_active(), 0, settings.MAX_ITEMS_PER_PAGE
                )
            )
            await callback.answer()
            return
        
        await callback.message.edit_text(
            f"üè¢ <b>–§–û–ö–∏ —Ä–∞–π–æ–Ω–∞: {district.name}</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –§–û–ö–æ–≤: {foks_count}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –∫–æ–º–ø–ª–µ–∫—Å:",
            reply_markup=get_foks_keyboard(foks, district.name, 0, settings.MAX_ITEMS_PER_PAGE)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in district_foks: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("foks_page_"))
async def foks_page(callback: CallbackQuery):
    """Handle FOKs pagination"""
    try:
        parts = callback.data.split("_")
        district_name = parts[2]
        page = int(parts[3])
        
        foks = await fok_repo.get_by_district(district_name, page * settings.MAX_ITEMS_PER_PAGE, settings.MAX_ITEMS_PER_PAGE)
        
        await callback.message.edit_reply_markup(
            reply_markup=get_foks_keyboard(foks, district_name, page, settings.MAX_ITEMS_PER_PAGE)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in foks_page: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("fok_"))
async def fok_card(callback: CallbackQuery, user: User):
    """Show FOK card"""
    try:
        fok_id = callback.data.split("_", 1)[1]
        
        # Get FOK
        fok = await fok_repo.find_by_id(ObjectId(fok_id))
        if not fok:
            await callback.answer("‚ùå –§–û–ö –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return
        
        # Check if user has already applied
        user_has_applied = await application_repo.has_user_applied_to_fok(user.id, fok.id)
        
        await callback.message.edit_text(
            fok.get_card_text(),
            reply_markup=get_fok_card_keyboard(fok, user_has_applied, user.can_make_applications)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in fok_card: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "need_phone")
async def need_phone(callback: CallbackQuery):
    """Inform user about phone requirement"""
    await callback.answer(
        "üì± –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
        "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞.",
        show_alert=True
    )


@router.callback_query(F.data == "application_submitted")
async def application_submitted(callback: CallbackQuery):
    """Inform that application is already submitted"""
    await callback.answer(
        "‚úÖ –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –≤ —ç—Ç–æ—Ç –§–û–ö. "
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞—è–≤–∫–∏'.",
        show_alert=True
    )


@router.callback_query(F.data == "search_sports")
async def search_sports(callback: CallbackQuery, state: FSMContext):
    """Show sports filter"""
    try:
        sports = await sport_repo.get_all_active()
        
        if not sports:
            await callback.message.edit_text(
                "‚ùå –í–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            await callback.answer()
            return
        
        # Get selected sports from state
        state_data = await state.get_data()
        selected_sports = state_data.get("selected_sports", [])
        
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞.\n"
            "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_sports_filter_keyboard(sports, selected_sports)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in search_sports: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("toggle_sport_"))
async def toggle_sport(callback: CallbackQuery, state: FSMContext):
    """Toggle sport selection"""
    try:
        sport_name = callback.data.split("toggle_sport_", 1)[1]
        
        # Get current selection
        state_data = await state.get_data()
        selected_sports = state_data.get("selected_sports", [])
        
        # Toggle sport
        if sport_name in selected_sports:
            selected_sports.remove(sport_name)
        else:
            selected_sports.append(sport_name)
        
        # Update state
        await state.update_data(selected_sports=selected_sports)
        
        # Update keyboard
        sports = await sport_repo.get_all_active()
        await callback.message.edit_reply_markup(
            reply_markup=get_sports_filter_keyboard(sports, selected_sports)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in toggle_sport: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "clear_sports")
async def clear_sports(callback: CallbackQuery, state: FSMContext):
    """Clear sports selection"""
    try:
        await state.update_data(selected_sports=[])
        
        sports = await sport_repo.get_all_active()
        await callback.message.edit_reply_markup(
            reply_markup=get_sports_filter_keyboard(sports, [])
        )
        await callback.answer("üóë –í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error in clear_sports: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "search_by_sports")
async def search_by_sports(callback: CallbackQuery, state: FSMContext):
    """Search FOKs by selected sports"""
    try:
        state_data = await state.get_data()
        selected_sports = state_data.get("selected_sports", [])
        
        if not selected_sports:
            await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞.", show_alert=True)
            return
        
        # Search FOKs
        foks = await fok_repo.search_by_sports(selected_sports, 0, settings.MAX_ITEMS_PER_PAGE)
        
        if not foks:
            await callback.message.edit_text(
                f"‚ùå –§–û–ö–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –≤–∏–¥–∞–º–∏ —Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞: {', '.join(selected_sports)}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.",
                reply_markup=get_sports_filter_keyboard(await sport_repo.get_all_active(), selected_sports)
            )
            await callback.answer()
            return
        
        # Create results text
        results_text = (
            f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –§–û–ö–æ–≤: {len(foks)}\n"
            f"–í–∏–¥—ã —Å–ø–æ—Ä—Ç–∞: {', '.join(selected_sports)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –§–û–ö:"
        )
        
        # Create keyboard with found FOKs
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        for fok in foks:
            builder.row(
                callback.types.InlineKeyboardButton(
                    text=f"üè¢ {fok.name} ({fok.district})",
                    callback_data=f"fok_{fok.id}"
                )
            )
        
        builder.row(
            callback.types.InlineKeyboardButton(text="üîô –ö –ø–æ–∏—Å–∫—É", callback_data="search_sports"),
            callback.types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        )
        
        await callback.message.edit_text(
            results_text,
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in search_by_sports: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)