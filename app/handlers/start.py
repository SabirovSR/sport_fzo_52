from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, Contact
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from app.models import User
from app.database.repositories import user_repo
from app.keyboards.inline import get_main_menu_keyboard
from app.keyboards.reply import get_phone_request_keyboard, remove_keyboard


router = Router()


class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext, user: User):
    """Handle /start command"""
    await state.clear()
    
    if not user.registration_completed:
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–Ω–æ-–æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤!\n\n"
            f"–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –§–û–ö –∏ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ.\n\n"
            f"–î–ª—è –Ω–∞—á–∞–ª–∞, —Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
            reply_markup=remove_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_name)
    else:
        await show_main_menu(message, user)


@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext, user: User):
    """Process user name input"""
    if not message.text or len(message.text.strip()) < 2:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)."
        )
        return
    
    display_name = message.text.strip()
    user.display_name = display_name
    await user_repo.update(user)
    
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {display_name}! üòä\n\n"
        f"–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –≤ –§–û–ö–∏.\n\n"
        f"üì± –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥.\n"
        f"‚ö†Ô∏è –ë–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.",
        reply_markup=get_phone_request_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_phone)


@router.message(RegistrationStates.waiting_for_phone, F.contact)
async def process_phone_contact(message: Message, state: FSMContext, user: User):
    """Process phone number from contact"""
    contact: Contact = message.contact
    
    user.phone = contact.phone_number
    user.phone_shared = True
    user.registration_completed = True
    await user_repo.update(user)
    
    await message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è –ø–æ–¥–∞—á—É –∑–∞—è–≤–æ–∫ –≤ –§–û–ö–∏.",
        reply_markup=remove_keyboard()
    )
    
    await state.clear()
    await show_main_menu(message, user)


@router.message(RegistrationStates.waiting_for_phone, F.text.in_(["‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "/skip"]))
async def skip_phone(message: Message, state: FSMContext, user: User):
    """Skip phone number input"""
    user.phone_shared = False
    user.registration_completed = True
    await user_repo.update(user)
    
    await message.answer(
        f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
        f"‚ö†Ô∏è –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —É–∫–∞–∑–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –§–û–ö–æ–≤, "
        f"–Ω–æ –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏.\n\n"
        f"–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
        reply_markup=remove_keyboard()
    )
    
    await state.clear()
    await show_main_menu(message, user)


@router.message(RegistrationStates.waiting_for_phone)
async def invalid_phone_input(message: Message):
    """Handle invalid input during phone registration"""
    await message.answer(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç.",
        reply_markup=get_phone_request_keyboard()
    )


@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery, user: User):
    """Handle main menu callback"""
    await callback.message.edit_text(
        get_welcome_text(user),
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "help")
async def help_callback(callback: CallbackQuery):
    """Show help information"""
    help_text = (
        "üÜò <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "üè¢ <b>–ö–∞—Ç–∞–ª–æ–≥ –§–û–ö–æ–≤</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–Ω–æ-–æ–∑–¥–æ—Ä–æ–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤ –ø–æ —Ä–∞–π–æ–Ω–∞–º\n\n"
        "üìã <b>–ú–æ–∏ –∑–∞—è–≤–∫–∏</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–∞\n\n"
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞</b> - –ø–æ–∏—Å–∫ –§–û–ö–æ–≤ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞\n\n"
        "üì± <b>–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏</b> - –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "üìä <b>–°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:</b>\n"
        "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –∑–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ –∏ –æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è\n"
        "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞ - –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞\n"
        "üì§ –ü–µ—Ä–µ–¥–∞–Ω–∞ –≤ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ - –∑–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –§–û–ö\n"
        "üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ - –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—â–∞—Ç—å –§–û–ö\n"
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞ - –∑–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
        "üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–∞ - –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
        "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await callback.message.edit_text(
        help_text,
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "settings")
async def settings_callback(callback: CallbackQuery, user: User):
    """Show user settings"""
    settings_text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {user.display_name}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {'‚úÖ –£–∫–∞–∑–∞–Ω' if user.phone_shared else '‚ùå –ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìä <b>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:</b> {user.total_applications}\n"
        f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user.created_at.strftime('%d.%m.%Y')}\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    from app.keyboards.inline import get_back_keyboard
    await callback.message.edit_text(
        settings_text,
        reply_markup=get_back_keyboard("main_menu", "üîô –ù–∞–∑–∞–¥")
    )
    await callback.answer()


@router.message(Command("menu"))
async def menu_command(message: Message, user: User):
    """Handle /menu command"""
    await show_main_menu(message, user)


async def show_main_menu(message: Message, user: User):
    """Show main menu"""
    await message.answer(
        get_welcome_text(user),
        reply_markup=get_main_menu_keyboard()
    )


def get_welcome_text(user: User) -> str:
    """Get welcome text for user"""
    greeting_time = "–¥–µ–Ω—å"
    import datetime
    current_hour = datetime.datetime.now().hour
    if 6 <= current_hour < 12:
        greeting_time = "—É—Ç—Ä–æ"
    elif 12 <= current_hour < 18:
        greeting_time = "–¥–µ–Ω—å"
    elif 18 <= current_hour < 23:
        greeting_time = "–≤–µ—á–µ—Ä"
    else:
        greeting_time = "–Ω–æ—á—å"
    
    return (
        f"üè¢ <b>–ö–∞—Ç–∞–ª–æ–≥ –§–û–ö–æ–≤</b>\n\n"
        f"–î–æ–±—Ä–æ{' ' if greeting_time != '–Ω–æ—á—å' else '–π'} {greeting_time}, {user.display_name}! üëã\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
    )