from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from bson import ObjectId
from loguru import logger
from datetime import datetime, timedelta

from app.models import User, Application
from app.models.application import ApplicationStatus
from app.database.repositories import (
    application_repo, user_repo, fok_repo, 
    district_repo, sport_repo
)
from app.keyboards.inline import get_admin_menu_keyboard, get_back_keyboard
from app.middlewares.admin_middleware import AdminMiddleware
from app.tasks.notifications import send_application_status_update, send_admin_notification
from app.tasks.reports import generate_statistics_report, generate_custom_report
from app.config import settings


router = Router()
router.message.middleware(AdminMiddleware(admin_only=True))
router.callback_query.middleware(AdminMiddleware(admin_only=True))


class AdminStates(StatesGroup):
    waiting_for_search_query = State()
    waiting_for_application_notes = State()
    waiting_for_fok_data = State()


@router.callback_query(F.data == "admin_menu")
async def admin_menu(callback: CallbackQuery, user: User):
    """Show admin menu"""
    if not user.is_admin and not user.is_super_admin and user.telegram_id not in settings.super_admin_ids_list:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
        return
    
    await callback.message.edit_text(
        f"üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.display_name}!\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_applications")
async def admin_applications(callback: CallbackQuery):
    """Show applications management"""
    try:
        # Get pending applications
        pending_apps = await application_repo.get_by_status(ApplicationStatus.PENDING, 0, 10)
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        if pending_apps:
            builder.row(callback.types.InlineKeyboardButton(
                text=f"‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({len(pending_apps)})",
                callback_data="admin_apps_pending"
            ))
        
        builder.row(
            callback.types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫", callback_data="admin_search_apps"),
            callback.types.InlineKeyboardButton(text="üìä –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_apps")
        )
        
        builder.row(
            callback.types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ", callback_data="admin_apps_accepted"),
            callback.types.InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ", callback_data="admin_apps_transferred")
        )
        
        builder.row(
            callback.types.InlineKeyboardButton(text="üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", callback_data="admin_apps_completed"),
            callback.types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", callback_data="admin_apps_cancelled")
        )
        
        builder.row(callback.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu"))
        
        await callback.message.edit_text(
            "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–æ–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in admin_applications: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("admin_apps_"))
async def admin_apps_by_status(callback: CallbackQuery):
    """Show applications by status"""
    try:
        status_map = {
            "pending": ApplicationStatus.PENDING,
            "accepted": ApplicationStatus.ACCEPTED,
            "transferred": ApplicationStatus.TRANSFERRED,
            "completed": ApplicationStatus.COMPLETED,
            "cancelled": ApplicationStatus.CANCELLED
        }
        
        status_key = callback.data.split("_")[-1]
        status = status_map.get(status_key)
        
        if not status:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å.", show_alert=True)
            return
        
        applications = await application_repo.get_by_status(status, 0, settings.MAX_ITEMS_PER_PAGE)
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        if not applications:
            builder.row(callback.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_applications"))
            
            await callback.message.edit_text(
                f"üìã <b>–ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status.value}</b>\n\n"
                "–ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=builder.as_markup()
            )
            await callback.answer()
            return
        
        for app in applications:
            builder.row(callback.types.InlineKeyboardButton(
                text=f"#{str(app.id)[-6:]} {app.fok_name} - {app.user_name}",
                callback_data=f"admin_app_{app.id}"
            ))
        
        builder.row(callback.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_applications"))
        
        await callback.message.edit_text(
            f"üìã <b>–ó–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status.value}</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(applications)}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in admin_apps_by_status: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("admin_app_"))
async def admin_application_card(callback: CallbackQuery):
    """Show application card for admin"""
    try:
        app_id = callback.data.split("_", 2)[2]
        application = await application_repo.find_by_id(ObjectId(app_id))
        
        if not application:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        
        # Status change buttons
        if application.status == ApplicationStatus.PENDING:
            builder.row(
                callback.types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"admin_accept_{app_id}"),
                callback.types.InlineKeyboardButton(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{app_id}")
            )
        elif application.status == ApplicationStatus.ACCEPTED:
            builder.row(
                callback.types.InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å", callback_data=f"admin_transfer_{app_id}"),
                callback.types.InlineKeyboardButton(text="üö´ –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_reject_{app_id}")
            )
        elif application.status == ApplicationStatus.TRANSFERRED:
            builder.row(
                callback.types.InlineKeyboardButton(text="üéâ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"admin_complete_{app_id}")
            )
        
        # Additional actions
        builder.row(
            callback.types.InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ", callback_data=f"admin_note_{app_id}"),
            callback.types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"admin_user_{application.user_id}")
        )
        
        builder.row(callback.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_applications"))
        
        await callback.message.edit_text(
            application.get_card_text(),
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in admin_application_card: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("admin_accept_"))
async def admin_accept_application(callback: CallbackQuery, user: User):
    """Accept application"""
    try:
        app_id = callback.data.split("_", 2)[2]
        application = await application_repo.find_by_id(ObjectId(app_id))
        
        if not application:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        old_status = application.status
        application.update_status(ApplicationStatus.ACCEPTED, user.id)
        await application_repo.update(application)
        
        # Send notification to user
        await send_application_status_update.delay(
            str(application.id), old_status.value, ApplicationStatus.ACCEPTED.value
        )
        
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!", show_alert=True)
        
        # Update display
        await admin_application_card(callback)
        
    except Exception as e:
        logger.error(f"Error in admin_accept_application: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("admin_transfer_"))
async def admin_transfer_application(callback: CallbackQuery, user: User):
    """Transfer application"""
    try:
        app_id = callback.data.split("_", 2)[2]
        application = await application_repo.find_by_id(ObjectId(app_id))
        
        if not application:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        old_status = application.status
        application.update_status(ApplicationStatus.TRANSFERRED, user.id)
        await application_repo.update(application)
        
        # Send notification to user
        await send_application_status_update.delay(
            str(application.id), old_status.value, ApplicationStatus.TRANSFERRED.value
        )
        
        await callback.answer("üì§ –ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ!", show_alert=True)
        
        # Update display
        await admin_application_card(callback)
        
    except Exception as e:
        logger.error(f"Error in admin_transfer_application: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("admin_complete_"))
async def admin_complete_application(callback: CallbackQuery, user: User):
    """Complete application"""
    try:
        app_id = callback.data.split("_", 2)[2]
        application = await application_repo.find_by_id(ObjectId(app_id))
        
        if not application:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        old_status = application.status
        application.update_status(ApplicationStatus.COMPLETED, user.id)
        await application_repo.update(application)
        
        # Send notification to user
        await send_application_status_update.delay(
            str(application.id), old_status.value, ApplicationStatus.COMPLETED.value
        )
        
        await callback.answer("üéâ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!", show_alert=True)
        
        # Update display
        await admin_application_card(callback)
        
    except Exception as e:
        logger.error(f"Error in admin_complete_application: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data.startswith("admin_reject_"))
async def admin_reject_application(callback: CallbackQuery, user: User):
    """Reject application"""
    try:
        app_id = callback.data.split("_", 2)[2]
        application = await application_repo.find_by_id(ObjectId(app_id))
        
        if not application:
            await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        old_status = application.status
        application.update_status(ApplicationStatus.REJECTED, user.id)
        await application_repo.update(application)
        
        # Send notification to user
        await send_application_status_update.delay(
            str(application.id), old_status.value, ApplicationStatus.REJECTED.value
        )
        
        await callback.answer("üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!", show_alert=True)
        
        # Update display
        await admin_application_card(callback)
        
    except Exception as e:
        logger.error(f"Error in admin_reject_application: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "admin_stats")
async def admin_statistics(callback: CallbackQuery):
    """Show statistics"""
    try:
        # Generate statistics for last 30 days
        stats = await generate_statistics_report.delay(30)
        stats_data = stats.get()
        
        # Format statistics message
        message = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π</b>\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats_data['users']['total']}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats_data['users']['active_in_period']}\n\n"
            f"üìã <b>–ó–∞—è–≤–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {stats_data['applications']['total']}\n"
            f"‚Ä¢ –ó–∞ –ø–µ—Ä–∏–æ–¥: {stats_data['applications']['period_total']}\n\n"
            f"üìä <b>–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:</b>\n"
        )
        
        for status, count in stats_data['applications']['by_status'].items():
            message += f"‚Ä¢ {status}: {count}\n"
        
        message += f"\nüè¢ <b>–§–û–ö–∏:</b>\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats_data['foks']['total']}\n\n"
        
        if stats_data['foks']['popular']:
            message += f"üî• <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –§–û–ö–∏:</b>\n"
            for fok in stats_data['foks']['popular'][:3]:
                message += f"‚Ä¢ {fok['name']} ({fok['district']}) - {fok['applications']} –∑–∞—è–≤–æ–∫\n"
        
        await callback.message.edit_text(
            message,
            reply_markup=get_back_keyboard("admin_menu", "üîô –ù–∞–∑–∞–¥")
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in admin_statistics: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", show_alert=True)


@router.callback_query(F.data == "admin_foks")
async def admin_foks_management(callback: CallbackQuery):
    """FOKs management menu"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    builder.row(
        callback.types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –§–û–ö", callback_data="admin_add_fok"),
        callback.types.InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –§–û–ö", callback_data="admin_edit_fok")
    )
    builder.row(
        callback.types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –§–û–ö", callback_data="admin_delete_fok"),
        callback.types.InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –§–û–ö–æ–≤", callback_data="admin_list_foks")
    )
    builder.row(callback.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu"))
    
    await callback.message.edit_text(
        "üè¢ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–û–ö–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_users")
async def admin_users_management(callback: CallbackQuery):
    """Users management menu"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    builder.row(
        callback.types.InlineKeyboardButton(text="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_promote_user"),
        callback.types.InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="admin_block_user")
    )
    builder.row(
        callback.types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user"),
        callback.types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_user_stats")
    )
    builder.row(callback.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu"))
    
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_reports")
async def admin_reports(callback: CallbackQuery):
    """Reports menu"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    builder = InlineKeyboardBuilder()
    
    builder.row(
        callback.types.InlineKeyboardButton(text="üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç", callback_data="admin_generate_report"),
        callback.types.InlineKeyboardButton(text="üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="admin_weekly_report")
    )
    builder.row(
        callback.types.InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats"),
        callback.types.InlineKeyboardButton(text="üìã –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export_data")
    )
    builder.row(callback.types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_menu"))
    
    await callback.message.edit_text(
        "üìà <b>–û—Ç—á–µ—Ç—ã –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()