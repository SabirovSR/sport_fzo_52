from typing import List, Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.models import District, FOK, Application


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """Main menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üè¢ –ö–∞—Ç–∞–ª–æ–≥ –§–û–ö–æ–≤", callback_data="catalog_main")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications")
    )
    builder.row(
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –ø–æ –≤–∏–¥–∞–º —Å–ø–æ—Ä—Ç–∞", callback_data="search_sports")
    )
    builder.row(
        InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help"),
        InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    )
    
    return builder.as_markup()


def get_catalog_districts_keyboard(districts: List[District], page: int = 0, per_page: int = 10) -> InlineKeyboardMarkup:
    """Districts catalog keyboard with pagination"""
    builder = InlineKeyboardBuilder()
    
    # Calculate pagination
    start_idx = page * per_page
    end_idx = start_idx + per_page
    districts_page = districts[start_idx:end_idx]
    
    # Add district buttons (2 per row)
    for i in range(0, len(districts_page), 2):
        row_buttons = []
        for j in range(2):
            if i + j < len(districts_page):
                district = districts_page[i + j]
                row_buttons.append(
                    InlineKeyboardButton(
                        text=f"üìç {district.name}",
                        callback_data=f"district_{district.id}"
                    )
                )
        builder.row(*row_buttons)
    
    # Pagination buttons
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"districts_page_{page-1}")
        )
    if end_idx < len(districts):
        pagination_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"districts_page_{page+1}")
        )
    
    if pagination_buttons:
        builder.row(*pagination_buttons)
    
    # Back to main menu
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_foks_keyboard(foks: List[FOK], district_name: str, page: int = 0, per_page: int = 10) -> InlineKeyboardMarkup:
    """FOKs list keyboard with pagination"""
    builder = InlineKeyboardBuilder()
    
    # Calculate pagination
    start_idx = page * per_page
    end_idx = start_idx + per_page
    foks_page = foks[start_idx:end_idx]
    
    # Add FOK buttons
    for fok in foks_page:
        builder.row(
            InlineKeyboardButton(
                text=f"üè¢ {fok.name}",
                callback_data=f"fok_{fok.id}"
            )
        )
    
    # Pagination buttons
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"foks_page_{district_name}_{page-1}")
        )
    if end_idx < len(foks):
        pagination_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"foks_page_{district_name}_{page+1}")
        )
    
    if pagination_buttons:
        builder.row(*pagination_buttons)
    
    # Navigation buttons
    builder.row(
        InlineKeyboardButton(text="üîô –ö —Ä–∞–π–æ–Ω–∞–º", callback_data="catalog_main"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_fok_card_keyboard(fok: FOK, user_has_applied: bool = False, can_apply: bool = True) -> InlineKeyboardMarkup:
    """FOK card keyboard"""
    builder = InlineKeyboardBuilder()
    
    # Application button
    if can_apply:
        if user_has_applied:
            builder.row(
                InlineKeyboardButton(text="‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞", callback_data="application_submitted")
            )
        else:
            builder.row(
                InlineKeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"apply_{fok.id}")
            )
    else:
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω—É–∂–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                callback_data="need_phone"
            )
        )
    
    # Navigation buttons
    builder.row(
        InlineKeyboardButton(text="üîô –ö –§–û–ö–∞–º —Ä–∞–π–æ–Ω–∞", callback_data=f"district_back_{fok.district}"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_applications_keyboard(applications: List[Application], page: int = 0, per_page: int = 10) -> InlineKeyboardMarkup:
    """User applications keyboard with pagination"""
    builder = InlineKeyboardBuilder()
    
    if not applications:
        builder.row(
            InlineKeyboardButton(text="üìù –ü–æ–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É", callback_data="catalog_main")
        )
    else:
        # Calculate pagination
        start_idx = page * per_page
        end_idx = start_idx + per_page
        apps_page = applications[start_idx:end_idx]
        
        # Add application buttons
        for app in apps_page:
            status_emoji = {
                "pending": "‚è≥",
                "accepted": "‚úÖ", 
                "transferred": "üì§",
                "completed": "üéâ",
                "cancelled": "‚ùå",
                "rejected": "üö´"
            }.get(app.status, "üìã")
            
            builder.row(
                InlineKeyboardButton(
                    text=f"{status_emoji} {app.fok_name}",
                    callback_data=f"application_{app.id}"
                )
            )
        
        # Pagination buttons
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"apps_page_{page-1}")
            )
        if end_idx < len(applications):
            pagination_buttons.append(
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"apps_page_{page+1}")
            )
        
        if pagination_buttons:
            builder.row(*pagination_buttons)
    
    # Back to main menu
    builder.row(
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_application_card_keyboard(application: Application) -> InlineKeyboardMarkup:
    """Application card keyboard"""
    builder = InlineKeyboardBuilder()
    
    # Cancel button (if applicable)
    if application.can_be_cancelled:
        builder.row(
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É",
                callback_data=f"cancel_app_{application.id}"
            )
        )
    
    # Navigation buttons
    builder.row(
        InlineKeyboardButton(text="üîô –ö –º–æ–∏–º –∑–∞—è–≤–∫–∞–º", callback_data="my_applications"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_cancel_confirmation_keyboard(application_id: str) -> InlineKeyboardMarkup:
    """Confirmation keyboard for application cancellation"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_{application_id}"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"application_{application_id}")
    )
    
    return builder.as_markup()


def get_admin_menu_keyboard() -> InlineKeyboardMarkup:
    """Admin menu keyboard"""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_users"),
        InlineKeyboardButton(text="üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –§–û–ö–∞–º–∏", callback_data="admin_foks")
    )
    builder.row(
        InlineKeyboardButton(text="üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏", callback_data="admin_applications"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    )
    builder.row(
        InlineKeyboardButton(text="üìÅ –†–∞–π–æ–Ω—ã –∏ —Å–ø–æ—Ä—Ç", callback_data="admin_references"),
        InlineKeyboardButton(text="üìà –û—Ç—á–µ—Ç—ã", callback_data="admin_reports")
    )
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_sports_filter_keyboard(sports: List, selected_sports: List[str] = None) -> InlineKeyboardMarkup:
    """Sports filter keyboard"""
    builder = InlineKeyboardBuilder()
    
    if selected_sports is None:
        selected_sports = []
    
    # Add sport buttons (2 per row)
    for i in range(0, len(sports), 2):
        row_buttons = []
        for j in range(2):
            if i + j < len(sports):
                sport = sports[i + j]
                is_selected = sport.name in selected_sports
                prefix = "‚úÖ" if is_selected else "‚¨ú"
                row_buttons.append(
                    InlineKeyboardButton(
                        text=f"{prefix} {sport.display_name}",
                        callback_data=f"toggle_sport_{sport.name}"
                    )
                )
        builder.row(*row_buttons)
    
    # Action buttons
    if selected_sports:
        builder.row(
            InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –§–û–ö–∏", callback_data="search_by_sports"),
            InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_sports")
        )
    
    # Back button
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    
    return builder.as_markup()


def get_back_keyboard(callback_data: str, text: str = "üîô –ù–∞–∑–∞–¥") -> InlineKeyboardMarkup:
    """Simple back button keyboard"""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text=text, callback_data=callback_data))
    return builder.as_markup()